This is /home/wvxvw/programs/haxe-for-emacs/haxe-mode/bin/haxe.info,
produced by makeinfo version 4.13 from haxe.texi.

This is the HaXe language manual.

   Copyright (C) 2012 Oleg Sivokon

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.


File: haxe.info,  Node: Top,  Next: class,  Up: (dir)

HaXe programming language
*************************

This is the HaXe language manual.

   Copyright (C) 2012 Oleg Sivokon

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

   This is the root info page for HaXe programming language.  The
sections below describe the language components.

   The complete official language reference can be found here
(http://haxe.org/doc)

   *Keywords*

* Menu:

* class::       Class declaration.
* interface::   Interface declaration.
* enum::        Enumerator declaration.
* typedef::     Type declaration or alias.
* function::    Function declaration.
* var::         Variable declaration.
* import::      Compiler instruction for referencing another class.
* package::     Compiler instruction for referencing this class' location.
* private::     Access modifier, restricts access to the class containing
                the declaration.
* public::      Access modifier, permits arbitrary access.
* static::      Access modifier, binds the following declaration to the class
                rather then instances of the class.
* override::    Compiler instruction for generating a method that replaces
                the method with the same name in the superclass.
* do::          Do-while loop.
* else::        The complement of the if-else construction.
* try::         The code block expecting exceptions.
* for::         The for(i...n) or for(i in x) loop.
* if::          The condition checking construct.
* switch::      Multiple condition matching construct.
* while::       The while loop.
* catch::       The exception handling block.
* false::       Constant of type Bool.
* true::        Constant of type Bool.
* null::        Constant of type Null.
* this::        In a method body, a variable compiler populats with the
                reference to the object owning the method.
* super::       Instruction to look in superclass for method definition.
* in::          The keyword used in the for(i in x) loop.
* break::       Conditional termination of code inside a loop.
* continue::    Conditional skipping of the code inside a loop.
* finally::     Block of code executed after the code expecting exception
                whether or not there was an exception.

   *Built-in classes*

* Menu:


* Array::
* ArrayAccess::
* Bool::
* Class::
* Date::
* DateTools::
* Dynamic::
* EReg::
* Enum::
* EnumValue::
* Float::
* Hash::
* Int::
* IntHash::
* IntIter::
* Iterable::
* Iterator::
* Lambda::
* List::
* Math::
* Null::
* Reflect::
* Std::
* String::
* StringBuf::
* StringTools::
* Sys::
* Type::
* UInt::
* ValueType::
* Void::
* Xml::
* XmlType::


File: haxe.info,  Node: class,  Next: interface,  Prev: Top,  Up: Top




File: haxe.info,  Node: interface,  Next: enum,  Prev: class,  Up: Top




File: haxe.info,  Node: enum,  Next: typedef,  Prev: interface,  Up: Top




File: haxe.info,  Node: typedef,  Next: function,  Prev: enum,  Up: Top




File: haxe.info,  Node: function,  Next: var,  Prev: typedef,  Up: Top




File: haxe.info,  Node: var,  Next: import,  Prev: function,  Up: Top




File: haxe.info,  Node: import,  Next: package,  Prev: var,  Up: Top




File: haxe.info,  Node: package,  Next: private,  Prev: import,  Up: Top




File: haxe.info,  Node: private,  Next: public,  Prev: package,  Up: Top




File: haxe.info,  Node: public,  Next: static,  Prev: private,  Up: Top




File: haxe.info,  Node: static,  Next: override,  Prev: public,  Up: Top




File: haxe.info,  Node: override,  Next: do,  Prev: static,  Up: Top




File: haxe.info,  Node: do,  Next: else,  Prev: override,  Up: Top




File: haxe.info,  Node: else,  Next: try,  Prev: do,  Up: Top




File: haxe.info,  Node: try,  Next: for,  Prev: else,  Up: Top




File: haxe.info,  Node: for,  Next: if,  Prev: try,  Up: Top




File: haxe.info,  Node: if,  Next: switch,  Prev: for,  Up: Top




File: haxe.info,  Node: switch,  Next: while,  Prev: if,  Up: Top




File: haxe.info,  Node: while,  Next: catch,  Prev: switch,  Up: Top




File: haxe.info,  Node: catch,  Next: false,  Prev: while,  Up: Top




File: haxe.info,  Node: false,  Next: true,  Prev: catch,  Up: Top




File: haxe.info,  Node: true,  Next: null,  Prev: false,  Up: Top




File: haxe.info,  Node: null,  Next: this,  Prev: true,  Up: Top




File: haxe.info,  Node: this,  Next: super,  Prev: null,  Up: Top




File: haxe.info,  Node: super,  Next: in,  Prev: this,  Up: Top




File: haxe.info,  Node: in,  Next: break,  Prev: super,  Up: Top




File: haxe.info,  Node: break,  Next: continue,  Prev: in,  Up: Top




File: haxe.info,  Node: continue,  Next: finally,  Prev: break,  Up: Top




File: haxe.info,  Node: finally,  Next: Array,  Prev: continue,  Up: Top




File: haxe.info,  Node: Array,  Next: ArrayAccess,  Prev: finally,  Up: Top




File: haxe.info,  Node: ArrayAccess,  Next: Bool,  Prev: Array,  Up: Top




File: haxe.info,  Node: Bool,  Next: Class,  Prev: ArrayAccess,  Up: Top




File: haxe.info,  Node: Class,  Next: Date,  Prev: Bool,  Up: Top




File: haxe.info,  Node: Date,  Next: DateTools,  Prev: Class,  Up: Top




File: haxe.info,  Node: DateTools,  Next: Dynamic,  Prev: Date,  Up: Top




File: haxe.info,  Node: Dynamic,  Next: EReg,  Prev: DateTools,  Up: Top




File: haxe.info,  Node: EReg,  Next: Enum,  Prev: Dynamic,  Up: Top




File: haxe.info,  Node: Enum,  Next: EnumValue,  Prev: EReg,  Up: Top




File: haxe.info,  Node: EnumValue,  Next: Float,  Prev: Enum,  Up: Top




File: haxe.info,  Node: Float,  Next: Hash,  Prev: EnumValue,  Up: Top




File: haxe.info,  Node: Hash,  Next: Int,  Prev: Float,  Up: Top




File: haxe.info,  Node: Int,  Next: IntHash,  Prev: Hash,  Up: Top




File: haxe.info,  Node: IntHash,  Next: IntIter,  Prev: Int,  Up: Top




File: haxe.info,  Node: IntIter,  Next: Iterable,  Prev: IntHash,  Up: Top




File: haxe.info,  Node: Iterable,  Next: Iterator,  Prev: IntIter,  Up: Top




File: haxe.info,  Node: Iterator,  Next: Lambda,  Prev: Iterable,  Up: Top




File: haxe.info,  Node: Lambda,  Next: List,  Prev: Iterator,  Up: Top




File: haxe.info,  Node: List,  Next: Math,  Prev: Lambda,  Up: Top




File: haxe.info,  Node: Math,  Next: Null,  Prev: List,  Up: Top




File: haxe.info,  Node: Null,  Next: Reflect,  Prev: Math,  Up: Top




File: haxe.info,  Node: Reflect,  Next: Std,  Prev: Null,  Up: Top




File: haxe.info,  Node: Std,  Next: String,  Prev: Reflect,  Up: Top




File: haxe.info,  Node: String,  Next: StringBuf,  Prev: Std,  Up: Top




File: haxe.info,  Node: StringBuf,  Next: StringTools,  Prev: String,  Up: Top




File: haxe.info,  Node: StringTools,  Next: Sys,  Prev: StringBuf,  Up: Top




File: haxe.info,  Node: Sys,  Next: Type,  Prev: StringTools,  Up: Top




File: haxe.info,  Node: Type,  Next: UInt,  Prev: Sys,  Up: Top




File: haxe.info,  Node: UInt,  Next: ValueType,  Prev: Type,  Up: Top




File: haxe.info,  Node: ValueType,  Next: Void,  Prev: UInt,  Up: Top




File: haxe.info,  Node: Void,  Next: Xml,  Prev: ValueType,  Up: Top




File: haxe.info,  Node: Xml,  Next: XmlType,  Prev: Void,  Up: Top




File: haxe.info,  Node: XmlType,  Prev: Xml,  Up: Top





Tag Table:
Node: Top369
Node: class3171
Node: interface3244
Node: enum3320
Node: typedef3398
Node: function3475
Node: var3551
Node: import3626
Node: package3700
Node: private3778
Node: public3856
Node: static3933
Node: override4011
Node: do4085
Node: else4157
Node: try4224
Node: for4292
Node: if4358
Node: switch4427
Node: while4498
Node: catch4572
Node: false4645
Node: true4717
Node: null4788
Node: this4858
Node: super4929
Node: in4998
Node: break5068
Node: continue5141
Node: finally5219
Node: Array5297
Node: ArrayAccess5378
Node: Bool5456
Node: Class5534
Node: Date5605
Node: DateTools5681
Node: Dynamic5759
Node: EReg5837
Node: Enum5910
Node: EnumValue5985
Node: Float6061
Node: Hash6137
Node: Int6207
Node: IntHash6279
Node: IntIter6354
Node: Iterable6434
Node: Iterator6515
Node: Lambda6595
Node: List6671
Node: Math6743
Node: Null6813
Node: Reflect6886
Node: Std6958
Node: String7032
Node: StringBuf7108
Node: StringTools7192
Node: Sys7273
Node: Type7349
Node: UInt7418
Node: ValueType7493
Node: Void7568
Node: Xml7642
Node: XmlType7714

End Tag Table
