;;; haxe-mode/wisent/haxe.wy -- LL grammar for HaXe language specification
;;
;; Author: Oleg Sivokon <olegsivokon@gmail.com>
;;
;; This is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.
;;

;; %package haxe-wysent
%languagemode  haxe-mode

;; The default start symbol seems to be important for large files
;; %start compilation_unit
;; ;; Alternate entry points -  for partial re-parse
;; %start using_directive
;; %start package_declaration
;; %start class_declaration
;; %start const_declaration
;; %start field_declaration
;; %start constructor_declaration
;; %start method_declaration
;; %start property_declaration
;; %start indexer_declaration
;; %start event_declaration
;; %start fixed_parameter
;; %start interface_declaration
;; %start delegate_declaration
;; ;; - Needed by EXPANDFULL clauses
;; %start namespace_member_declaration
;; %start class_member_declaration
;; %start struct_member_declaration
;; %start interface_member_declaration
;; %start accessor_declaration
;; %start event_accessor_declaration
;; %start formal_parameters
;; %start indexer_parameters
;; %start enum_members
;; ;; - Need for semantic-get-local-variables
;; %start local_variable_declaration
;; %start local_foreach_declaration


;;; Keywords
;;
%token CASE        "case"
%put CASE summary
"A sub-expression of switch-case expression. Note that HaXe does not allow
fall-through and doesn't require `break' to terminate the case"

%token IF          "if"
%put IF summary
""

%token IN          "in"
%put IN summary
""

%token TRUE        "true"
%put TRUE summary
""

%token FALSE       "false"
%put FALSE summary
""

%token THIS        "this"
%put THIS summary
""

%token SUPER       "super"
%put SUPER summary
""

%token CATCH       "catch"
%put CATH summary
""

%token FUNCTION    "function"
%put FUNCTION summary
""

%token VAR         "var"
%put VAR summary
""

%token do          "do"
%put DO summary
""

%token break       "break"
%put BREAK summary
""

%token CONTINUE    "continue"
%put CONTINUE summary
""

%token RETURN      "return"
%put RETURN summary
""

%token DEFAULT     "default"
%put DEFAULT summary
""

%token PACKAGE     "package"
%put PACKAGE summary
""

%token IMPORT      "import"
%put IMPORT summary
""

%token NULL        "null"
%put NULL summary
""

%token ELSE        "else"
%put ELSE summary
""

%token CLASS       "class"
%put CLASS summary
""

%token INTERFACE   "interface"
%put INTERFACE summary
""

%token ENUM        "enum"
%put ENUM summary
""

%token NEW         "new"
%put NEW summary
""

%token TRY         "try"
%put TRY summary
""

%token THROW       "throw"
%put THROW summary
""

%token TYPEDEF     "typedef"
%put TYPEDEF summary
""

%token PRIVATE     "private"
%put PRIVATE summary
""

%token PUBLIC      "public"
%put PUBLIC summary
""

%token STATIC      "static"
%put STATIC summary
""

%token OVERRIDE    "override"
%put OVERRIDE summary
""

%token USING       "using"
%put USING summary
""
%token INLINE      "inline"
%put INLINE summary
""

%type  <punctuation> ;;syntax "\\(\\s.\\|\\s$\\|\\s'\\)+" matchdatatype string

%token <punctuation> PLUS_PLUS   "++"
%token <punctuation> MINUS_MINUS "--"
%token <punctuation> EQ_EQ       "=="
%token <punctuation> NOT_EQUAL   "!="
%token <punctuation> LT_EQ       "<="
%token <punctuation> GT_EQ       ">="
%token <punctuation> PLUS_EQ     "+="
%token <punctuation> MINUS_EQ    "-="
%token <punctuation> MUL_EQ      "*="
%token <punctuation> DIV_EQ      "/="
%token <punctuation> MOD_EQ      "%="
%token <punctuation> SL_EQ       "<<="
%token <punctuation> SR_EQ       ">>="
%token <punctuation> AND_EQ      "&="
%token <punctuation> OR_EQ       "|="
%token <punctuation> XOR_EQ      "^="
%token <punctuation> OR_OR       "||"
%token <punctuation> AND_AND     "&&"
%token <punctuation> SL          "<<"
%token <punctuation> SR          ">>"
%token <punctuation> NOT         "!"
%token <punctuation> MOD         "%"
%token <punctuation> AND         "&"
%token <punctuation> MULT        "*"
%token <punctuation> PLUS        "+"
%token <punctuation> COMMA       ","
%token <punctuation> MINUS       "-"
%token <punctuation> DOT         "."
%token <punctuation> DIV         "/"
%token <punctuation> COLON       ":"
%token <punctuation> SEMI        ";"
%token <punctuation> LT          "<"
%token <punctuation> EQ          "="
%token <punctuation> GT          ">"
%token <punctuation> URSHIFT     ">>>"
%token <punctuation> URSHIFTEQ   ">>>="
%token <punctuation> QUESTION    "?"
%token <punctuation> XOR         "^"
%token <punctuation> OR          "|"
%token <punctuation> COMP        "~"
%token <punctuation> META        "@"

;;; Symbol literals
;;
%token <symbol>      NULL_LITERAL     "null"
%token <symbol>      BOOLEAN_LITERAL  "false"
%token <symbol>      BOOLEAN_LITERAL  "true"
%token <symbol>      IDENTIFIER
%token <string>      STRING_LITERAL
;; %token <regexp>      REGEXP_LITERAL
%token <number>      NUMBER_LITERAL

;;; Blocks
;;
%token <semantic-list> PAREN_BLCK "^("
%token <semantic-list> BRACK_BLCK "^\\["
%token <semantic-list> BRACE_BLCK "^{"

;;; Parenthesis
;;
%token <open-paren>  LPAREN           "("
%token <close-paren> RPAREN           ")"
%token <open-paren>  LBRACE           "{"
%token <close-paren> RBRACE           "}"
%token <open-paren>  LBRACK           "["
%token <close-paren> RBRACK           "]"

%%

;;---------------
;; * LALR Grammar
;;---------------

;;--------------------------------------------------
;; ** Types and Names
;;--------------------------------------------------

literal
  : NULL_LITERAL
  | BOOLEAN_LITERAL
  | STRING_LITERAL
  | NUMBER_LITERAL
  ;; | REGEXP_LITERAL              ;; not defined yet
  ;; | ARRAY_LITERAL               ;; not defined yet
  ;; | OBJECT_LITERAL              ;; not defined yet
  ;

type
  : ;; EMPTY
  | qualified_name type_parameter_opt
    (concat $1 $2)
  ;

type_parameter
  : LT qualified_name GT
    (concat $1 $2 $3)
  | LT qualified_name type_parameter GT
  ;

type_parameter_opt
  : ;; EMPTY
  | type_parameter
  ;

qualified_name
  : qualified_name DOT IDENTIFIER
    (concat $1 "." $3)
  | IDENTIFIER
  ;

qualified_name_list
  : qualified_name_list COMMA qualified_name
    (cons $3 $1)
  | qualified_name
    (list $1)
  ;

;;--------------------------------------------------
;; ** Expressions
;;--------------------------------------------------

argument_list_opt
  : ;; EMPTY
  | argument_list
  ;

argument_list
  : argument_list COMMA argument
  | argument
  ;

;; just eat expressions
expression
  : expression term
  | term
  ;

term
  : literal
  | operator
  | IDENTIFIER
  ;; | BRACK_BLOCK
  ;; | PAREN_BLOCK
  ;; | BRACE_BLOCK
  | NEW
  | CLASS
  | THIS
  | SUPER
  ;

operator
  : NOT
  | PLUS
  | PLUS_PLUS
  | MINUS
  | MINUS_MINUS
  | NOT_EQ
  | MOD
  | MOD_EQ
  | AND
  | AND_AND
  | AND_EQ
  | MULT
  | MULT_EQ
  | PLUS_EQ
  | MINUS_EQ
  | DOT
  | DIV
  | DIV_EQ
  | COLON
  | LT
  | LSHIFT
  | LSHIFT_EQ
  | LT_EQ
  | EQ
  | EQ_EQ
  | GT
  | GT_EQ
  | RSHIFT
  | RSHIFT_EQ
  | QUESTION
  | XOR
  | XOREQ
  | OR
  | OREQ
  | OROR
  | COMP
  | IS
  ;

--------------------------------------------------
** top level rules
--------------------------------------------------

compilation_unit
  : using_directive
  | package_declaration
  | type_declaration
  ;

;; alias or namespace using directive
using_directive
  : USING IDENTIFIER SEMICOLON
  ;

package_declaration
  : PACKAGE qualified_name SEMICOLON
  ;

type_declaration
  : SEMICOLON
    ()
  | class_declaration
  | typedef_declaration
  | interface_declaration
  | enum_declaration
  ;

--------------------------------------------------
** Classes
--------------------------------------------------

modifiers_opt
  : ;; EMPTY
  | modifiers
    (nreverse $1)
  ;

modifiers
  : modifiers modifier
    (cons $2 $1)
  | modifier
    (list $1)
  ;

modifier
  : NEW
  | PUBLIC
  | PRIVATE
  | STATIC
  | OVERRIDE
  | INLINE
  ;


;;; haxe.wy ends here
